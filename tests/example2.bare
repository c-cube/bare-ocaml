
# tests around mutually recursive types

type Person struct {
  first: str
  last: str
}

type PTreeNil void

type PTreeNode struct {
  left: PTree
  person: Person
  right: PTree
}

type PTree union { PTreeNil | PTreeNode }


type Rec1 struct {
  a1: str
  r2: optional<Rec2>
}

type Rec2 struct {
  a2: i16
  r1: optional<Rec1>
}

type PTree2 union { void | PTree2Node }

type PTree2Node struct {
  left: PTree2
  i: int
  right: PTree2
}

type AllInts struct {
  i1: u8
  i2: i8
  i3: u16
  i4: i16
  i5: u32
  i6: i32
  i7: u64
  i8_: i64
  i9: uint
  i10: int
}
